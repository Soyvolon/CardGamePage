# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Publish

on:
  push:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 unittest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Copy via ssh
      # You may pin to the exact commit or the version.
      # uses: garygrossgarten/github-action-scp@0c1ad091481702528d20a02000b6248da6c5f8fb
      uses: garygrossgarten/github-action-scp@v0.6.0
      with:
        # Path to the local folder you want to copy.
        local: /*
        # Path on the remote server to copy to.
        remote: /var/www/andrewbounds/
        # Number of concurrent file transfers.
        #concurrency: # optional, default is 1
        # Wether copy of directory should be recursive
        #recursive: # optional, default is true
        # Log status of every file copy
        #verbose: # optional, default is true
        # Hostname or IP address of the server.
        host: andrewbounds.com # optional, default is localhost
        # Username for authentication.
        username: ${{ secrets.SSH_USER }} # optional
        # Port number of the server.
        #port: # optional, default is 22
        # File Location or string that contains a private key for either key-based or hostbased user authentication (OpenSSH format)
        privateKey: ${{ secrets.SSH_PRIVATE_KEY }} # optional
        # Password for password-based user authentication.
        #password: # optional
        # For an encrypted private key, this is the passphrase used to decrypt it.
        passphrase: ${{ secrets.SSH_KEY_PASS }} # optional
        # Try keyboard-interactive user authentication if primary user authentication method fails.
        #tryKeyboard: # optional
